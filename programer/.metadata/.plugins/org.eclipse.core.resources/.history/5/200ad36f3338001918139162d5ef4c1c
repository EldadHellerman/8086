/*
 * File: main.c
 * Project: Programmer
 *
 * Created on: 25.1.2019
 * Author: Eldad Hellerman
 */


#include "stdio.h"
#include "stdlib.h"
#include "mem.h"
#include "string.h"
#include "unistd.h"
#include "time.h"
#include "stdbool.h"
#include "serial.h"

typedef unsigned char byte;

struct parameters{
	int baud_rate;
	int com_port;
	char *output_file_path;
	char *input_file_path;
	int interrupt_number;
} static current_parameters;

typedef struct{
	char *name;
	void ( *cb)(void);
} function;

void write_uint32(char *buffer, unsigned int num){
	buffer[0] = (num>>24) & 0xff;
	buffer[1] = (num>>16) & 0xff;
	buffer[2] = (num>> 8) & 0xff;
	buffer[3] = (num>> 0) & 0xff;
}

void upload(){
	struct parameters *p = &current_parameters;
	FILE *file;
	char buffer[4096 + 10];
	//printf("uploading %s through com %d at %d\n",p->input_file_path, p->com_port, p->baud_rate);
	if(p->input_file_path == NULL){
		printf("ERROR, input file not specified!\n");
		return;
	}
	file = fopen(p->input_file_path,"rb");
	if(file == NULL){
		printf("Error! file wasn't found\n");
		return;
	}
	fseek(file, 0, SEEK_END);
	int file_size = ftell(file);
	fseek(file, 0, SEEK_SET);
	if(file_size > 4096){
		printf("ERROR! File is too big");
		fclose(file);
		return;
	}
	if(fread(buffer+10,1,file_size,file) != file_size){
		printf("ERROR! could not read file completely\n");
		fclose(file);
		return;
	}
	printf("read file, size: %d\n",file_size);
	fclose(file);

	serial_open(p->com_port, p->baud_rate);
	buffer[0] = 'p'; buffer[1] = 'u';
	write_uint32(&buffer[2],0);
	write_uint32(&buffer[6],file_size);
	if(serial_write(buffer, 10) != 10){
		printf("ERROR, cannot initiate communication\n");
		return;
	}
	int wrote = 0;
	while(wrote < file_size){
		int w = serial_write(buffer+10, file_size);
		if(!w){ wrote = 0; break;}
		wrote += w;
	}
	if(wrote == 0){
		printf("ERROR, serial communication error\n");
		return;
	}
	buffer[0] = 'r'; buffer[1] = 'c';
	if(serial_write(buffer, 2) != 2){
		printf("ERROR, cannot initiate communication\n");
		return;
	}
	printf("Programmed successfully!\n");
	serial_close();
}

void dump(){
	struct parameters *p = &current_parameters;
	//printf("dumping memory through com %d at %d",p->com_port, p->baud_rate);
	char buffer[4096];
	buffer[0] = 'p'; buffer[1] = 'm';
	write_uint32(&buffer[2],0);
	write_uint32(&buffer[6],4096);
	serial_open(p->com_port, p->baud_rate);
	if(serial_write(buffer, 10) != 10){
		printf("ERROR, cannot initiate communication\n");
		return;
	}
	int read = 0;
	while(read < 4096){
		int r = serial_read(buffer, 4096);
		if(!r){ read = 0; break;}
		read += r;
	}
	if(read == 0){
		printf("ERROR, serial communication error\n");
		return;
	}
	char temp = 'c';
	if(serial_write(&temp, 1) != 1){
		printf("ERROR, cannot initiate communication\n");
		return;
	}
	printf("Memory was read successfully!\n");
	serial_close();

	if(p->output_file_path == NULL){
		for(int i=0; i<4096; i++){
			if((i%16) == 0) printf("%03X:    ",i);
			if(((i%16) == 15)) printf("%.2X\n", ((int)buffer[i])&0xff);
			else printf("%.2X,", ((int)buffer[i])&0xff);
			//printf(((i%16) == 15) ? "%.2X\n" : "%.2X,", ((int)buffer[i])&0xff);
		}
	}else{
		FILE *file;
		file = fopen(p->output_file_path,"wb+");
		if(file == NULL){
			printf("Error! can't write to file\n");
			return;
		}
		if(fwrite(buffer,1,4096,file) != 4096){
			printf("ERROR! could not write file completely\n");
			fclose(file);
			return;
		}
		printf("wrote to file!\n");
		fclose(file);
	}
}

void interrupt(void){
	struct parameters *p = &current_parameters;
	char buffer[2];
	buffer[0] = 'i';
	buffer[1] = (unsigned char)p->interrupt_number;
	serial_open(p->com_port, p->baud_rate);
	if(serial_write(buffer, 2) != 2){
		printf("ERROR, cannot send intterupt\n");
		return;
	}
	serial_close();
}

function functions[] = {
		{.name = "upload", .cb = upload},
		{.name = "dump", .cb = dump},
		{.name = "interrupt", .cb = interrupt},
};

int number_of_functions = 3;

void serial_test(){
	char rx[15000];
	char tx[3] = "b";
	printf("opening\n");
	serial_open(5,230400);

	printf("writing b\n");
	serial_write(tx,1);
	printf("reading...");
	int read = serial_read(rx, 15000);
	printf("read %d bytes\n",read);
	printf("closing\n");
	serial_close();
	printf("printing:\n");
	printf("%.*s",read,rx);
}

void print_help_menu(void){
	printf("--------------------------------------------------\n");
	printf("8086 Programer\nWritten by EH\nA utility for interfacing with the 8086 board\n\n");
	printf("Usage: Programer.exe function [options]\n");
	printf("Functions:\n");
	printf("\tupload - uploading input file to board\n");
	printf("\tdump - dumping memory to terminal or to output file\n");
	printf("Options:\n");
	printf("\t-c <com_port>, --baudrate <com_port>      Sets the COM port\n");
	printf("\t-b <baud_rate>, --baudrate <baud_rate>    Sets the baud rate\n");
	printf("\t-o <output_path>                          Sets the output path\n");
	printf("\t-i <input_path>                           Sets the input path\n");
	printf("--------------------------------------------------\n");
}

void parse_parameters(int argc, char **args){
	char *parameter;
	int length;
	function *main_func = NULL;
	int error = 0;
	//struct parameters = NULL;
	for(int i=0; i<argc; i++){
		parameter = args[i];
		length = strlen(parameter);
		//printf("%d (%d): %s\n",i,length,parameter);
		if(parameter[0] == '-'){
			if(length >= 2 && parameter[1] == '-'){
				if(length < 3){ error = 1; break;}
				if(strncasecmp(&parameter[2],"comport",strlen("comport")) == 0){
					if(sscanf(&parameter[2 + strlen("comport")],"%d",&current_parameters.com_port) == 0) error = 3;
				}else if(strncasecmp(&parameter[2],"baudrate",strlen("baudrate")) == 0){
					if(sscanf(&parameter[2 + strlen("baudrate")],"%d",&current_parameters.baud_rate) == 0) error = 4;
				}else if(strncasecmp(&parameter[2],"interrupt",strlen("interrupt")) == 0){
					if(sscanf(&parameter[2 + strlen("interrupt")],"%d",&current_parameters.interrupt_number) == 0) error = 9;
				}
				if(error) break;
			}else{
				if(length < 2){ error = 2; break;}
				switch(parameter[1]){
				case 'c':
					if(sscanf(&parameter[2],"%d",&current_parameters.com_port) == 0) error = 5;
					break;
				case 'b':
					if(sscanf(&parameter[2],"%d",&current_parameters.baud_rate) == 0) error = 6;
					break;
				case 'o':
					if(length < 3){ error = 7; break;}
					current_parameters.output_file_path = &parameter[2];
					break;
				case 'i':
					if(length < 3){ error = 8; break;}
					current_parameters.input_file_path = &parameter[2];
					break;
				}
				if(error) break;
			}
		}else{
			for(int i=0; i<number_of_functions; i++) if(strcasecmp(functions[i].name,parameter) == 0) main_func = &functions[i];
			/*if(strcasecmp("upload",args[1]) == 0){ //use strcmp that doesnt care about capital letter maybe?

			}else if(strcmp("dump",args[1]) == 0){ //use strcmp that doesnt care about capital letter maybe?
				printf("dumping memory\n");
			}*/
			//first go through parameters and search parameter beginning with -, as in -b --baudrate, -c --comport, etc
			//and in that pass mark the location of main parameters - as in upload, program, help, terminal, etc
			//than the following will be on first main parameter, and not on all parameters.
			//as in: instead of args[1], it will be args[main_args[0]], args[main_args[1]], etc..
			//and maybe mark options also as args[option_args[0]], with its data at args[option_args[0] + 1]
		}
	}
	if(error){
		printf("there was an error (#%d)\n",error);
		return;
	}
	if(main_func != NULL){
		main_func->cb();
	}

}

int main(int argc, char **args){
	//serial_test();
	if(argc == 1){
		print_help_menu();
		return(EXIT_SUCCESS);
	}
	//printf("argc is %d\n",argc);
	current_parameters.output_file_path = NULL;
	current_parameters.input_file_path = NULL;
	current_parameters.interrupt_number = 0;
	parse_parameters(argc-1,args+1);
	return(EXIT_SUCCESS);
}
