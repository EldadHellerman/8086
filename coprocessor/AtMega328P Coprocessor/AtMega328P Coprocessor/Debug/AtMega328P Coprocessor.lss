
AtMega328P Coprocessor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b9  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d4  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000518  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_control>:
 */

#include "control.h"

void init_control(){
	RST_HIGH();
  80:	2a 9a       	sbi	0x05, 2	; 5
	DDRB = 0x04;
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	84 b9       	out	0x04, r24	; 4
  86:	08 95       	ret

00000088 <control_reset>:
}

void control_reset(){
	RST_HIGH();
  88:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8a e6       	ldi	r24, 0x6A	; 106
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <control_reset+0x4>
  90:	00 c0       	rjmp	.+0      	; 0x92 <control_reset+0xa>
	_delay_us(20);
	RST_LOW();
  92:	2a 98       	cbi	0x05, 2	; 5
  94:	08 95       	ret

00000096 <main>:
#include "control.h"

int main(void){
	//init_clock();
	//init_clock_250_khz();
	init_clock_500_khz();
  96:	0e 94 6d 00 	call	0xda	; 0xda <init_clock_500_khz>
	init_control();
  9a:	0e 94 40 00 	call	0x80	; 0x80 <init_control>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	84 e3       	ldi	r24, 0x34	; 52
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0xe>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x18>
  ae:	00 00       	nop
	_delay_ms(250);
	
	start_clock();
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	85 bd       	out	0x25, r24	; 37
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	85 bd       	out	0x25, r24	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e8       	ldi	r24, 0x8F	; 143
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x30>
  c6:	00 00       	nop
	_delay_us(100);
	control_reset();
  c8:	0e 94 44 00 	call	0x88	; 0x88 <control_reset>
  cc:	8f e8       	ldi	r24, 0x8F	; 143
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x3a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x40>
  d6:	00 00       	nop
	_delay_us(100);
	while(1);
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x42>

000000da <init_clock_500_khz>:
	OCR0A = 32;
	OCR0B = 11;
}

void init_clock_500_khz(){
	DDRD |= (1<<5);
  da:	55 9a       	sbi	0x0a, 5	; 10
	TIMSK0 = 0b00000000;
  dc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0;
  e0:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0b00100001;
  e2:	81 e2       	ldi	r24, 0x21	; 33
  e4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00001001; //0b00001000 will stop the clock
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	85 bd       	out	0x25, r24	; 37
	OCR0A = 16;
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	87 bd       	out	0x27, r24	; 39
	OCR0B = 5;
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	88 bd       	out	0x28, r24	; 40
  f2:	08 95       	ret

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
