
AtMega328P Coprocessor V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000009f4  00000a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  00800146  00800146  00000ace  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b16  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bba  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000deb  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00004184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e1  00000000  00000000  00004600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e17  00000000  00000000  00004ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005af8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__ctors_end>
   4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
   8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
   c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  10:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_4>
  14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  40:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  44:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  48:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_18>
  4c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  54:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  58:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  5c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  60:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  64:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  68:	04 04       	cpc	r0, r4
  6a:	17 04       	cpc	r1, r7
  6c:	41 04       	cpc	r4, r1
  6e:	4e 04       	cpc	r4, r14
  70:	4e 04       	cpc	r4, r14
  72:	4e 04       	cpc	r4, r14
  74:	4e 04       	cpc	r4, r14
  76:	4e 04       	cpc	r4, r14
  78:	4e 04       	cpc	r4, r14
  7a:	4e 04       	cpc	r4, r14
  7c:	4e 04       	cpc	r4, r14
  7e:	4e 04       	cpc	r4, r14
  80:	4e 04       	cpc	r4, r14
  82:	4e 04       	cpc	r4, r14
  84:	4e 04       	cpc	r4, r14
  86:	4e 04       	cpc	r4, r14
  88:	4e 04       	cpc	r4, r14
  8a:	4e 04       	cpc	r4, r14
  8c:	4e 04       	cpc	r4, r14
  8e:	4e 04       	cpc	r4, r14
  90:	4e 04       	cpc	r4, r14
  92:	4e 04       	cpc	r4, r14
  94:	4e 04       	cpc	r4, r14
  96:	4e 04       	cpc	r4, r14
  98:	4e 04       	cpc	r4, r14
  9a:	4e 04       	cpc	r4, r14
  9c:	4e 04       	cpc	r4, r14
  9e:	4e 04       	cpc	r4, r14
  a0:	4e 04       	cpc	r4, r14
  a2:	4e 04       	cpc	r4, r14
  a4:	4e 04       	cpc	r4, r14
  a6:	4e 04       	cpc	r4, r14
  a8:	4e 04       	cpc	r4, r14
  aa:	4e 04       	cpc	r4, r14
  ac:	4e 04       	cpc	r4, r14
  ae:	4e 04       	cpc	r4, r14
  b0:	4e 04       	cpc	r4, r14
  b2:	4e 04       	cpc	r4, r14
  b4:	4e 04       	cpc	r4, r14
  b6:	4e 04       	cpc	r4, r14
  b8:	4e 04       	cpc	r4, r14
  ba:	4e 04       	cpc	r4, r14
  bc:	4e 04       	cpc	r4, r14
  be:	4e 04       	cpc	r4, r14
  c0:	4e 04       	cpc	r4, r14
  c2:	4e 04       	cpc	r4, r14
  c4:	4e 04       	cpc	r4, r14
  c6:	4e 04       	cpc	r4, r14
  c8:	4e 04       	cpc	r4, r14
  ca:	4e 04       	cpc	r4, r14
  cc:	ea 03       	fmulsu	r22, r18
  ce:	4e 04       	cpc	r4, r14
  d0:	01 04       	cpc	r0, r1
  d2:	4e 04       	cpc	r4, r14
  d4:	4e 04       	cpc	r4, r14
  d6:	4e 04       	cpc	r4, r14
  d8:	fb 03       	fmulsu	r23, r19
  da:	4e 04       	cpc	r4, r14
  dc:	4e 04       	cpc	r4, r14
  de:	4e 04       	cpc	r4, r14
  e0:	f5 03       	fmuls	r23, r21
  e2:	fe 03       	fmulsu	r23, r22
  e4:	4e 04       	cpc	r4, r14
  e6:	ed 03       	fmulsu	r22, r21
  e8:	4e 04       	cpc	r4, r14
  ea:	f0 03       	fmuls	r23, r16
  ec:	4e 04       	cpc	r4, r14
  ee:	4e 04       	cpc	r4, r14
  f0:	f8 03       	fmulsu	r23, r16

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d8 e0       	ldi	r29, 0x08	; 8
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
  fe:	11 e0       	ldi	r17, 0x01	; 1
 100:	a0 e0       	ldi	r26, 0x00	; 0
 102:	b1 e0       	ldi	r27, 0x01	; 1
 104:	e4 ef       	ldi	r30, 0xF4	; 244
 106:	f9 e0       	ldi	r31, 0x09	; 9
 108:	02 c0       	rjmp	.+4      	; 0x10e <__do_copy_data+0x10>
 10a:	05 90       	lpm	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	a6 34       	cpi	r26, 0x46	; 70
 110:	b1 07       	cpc	r27, r17
 112:	d9 f7       	brne	.-10     	; 0x10a <__do_copy_data+0xc>

00000114 <__do_clear_bss>:
 114:	22 e0       	ldi	r18, 0x02	; 2
 116:	a6 e4       	ldi	r26, 0x46	; 70
 118:	b1 e0       	ldi	r27, 0x01	; 1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
 11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
 11e:	ae 34       	cpi	r26, 0x4E	; 78
 120:	b2 07       	cpc	r27, r18
 122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>
 124:	0e 94 95 01 	call	0x32a	; 0x32a <main>
 128:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_exit>

0000012c <__bad_interrupt>:
 12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <init_clock>:
 */

#include "clock_generator.h"

void init_clock(){
	DDRD |= (1<<5);
 130:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = 0b00100001;
 132:	81 e2       	ldi	r24, 0x21	; 33
 134:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00001000;
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 13a:	16 bc       	out	0x26, r1	; 38
	OCR0A = 4;
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	87 bd       	out	0x27, r24	; 39
	//OCR0A = 2;
	TIMSK0 = 0b00000000;
 140:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0B = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	88 bd       	out	0x28, r24	; 40
 148:	08 95       	ret

0000014a <ad_set>:
		 char first = uart_getchar();
		 char second = uart_getchar();
		 if(i & 0x80000) flash_prog(i,(second<<8) | first); else write_word(i,(second<<8) | first);
	}
	//printf("done\n");
}
 14a:	0e 94 aa 04 	call	0x954	; 0x954 <spi_send>
 14e:	2a 9a       	sbi	0x05, 2	; 5
 150:	2a 98       	cbi	0x05, 2	; 5
 152:	08 95       	ret

00000154 <ad_get>:
 154:	8c b5       	in	r24, 0x2c	; 44
 156:	88 60       	ori	r24, 0x08	; 8
 158:	8c bd       	out	0x2c, r24	; 44
 15a:	41 98       	cbi	0x08, 1	; 8
 15c:	41 9a       	sbi	0x08, 1	; 8
 15e:	0e 94 9b 04 	call	0x936	; 0x936 <spi_recieve>
 162:	2c b5       	in	r18, 0x2c	; 44
 164:	27 7f       	andi	r18, 0xF7	; 247
 166:	2c bd       	out	0x2c, r18	; 44
 168:	08 95       	ret

0000016a <hold_bus>:
 16a:	54 98       	cbi	0x0a, 4	; 10
 16c:	5c 98       	cbi	0x0b, 4	; 11
 16e:	52 98       	cbi	0x0a, 2	; 10
 170:	5a 9a       	sbi	0x0b, 2	; 11
 172:	53 98       	cbi	0x0a, 3	; 10
 174:	5b 9a       	sbi	0x0b, 3	; 11
 176:	28 9a       	sbi	0x05, 0	; 5
 178:	19 9b       	sbis	0x03, 1	; 3
 17a:	fe cf       	rjmp	.-4      	; 0x178 <hold_bus+0xe>
 17c:	54 9a       	sbi	0x0a, 4	; 10
 17e:	52 9a       	sbi	0x0a, 2	; 10
 180:	53 9a       	sbi	0x0a, 3	; 10
 182:	08 95       	ret

00000184 <release_bus>:
 184:	5c 98       	cbi	0x0b, 4	; 11
 186:	54 98       	cbi	0x0a, 4	; 10
 188:	5a 9a       	sbi	0x0b, 2	; 11
 18a:	52 98       	cbi	0x0a, 2	; 10
 18c:	5b 9a       	sbi	0x0b, 3	; 11
 18e:	53 98       	cbi	0x0a, 3	; 10
 190:	28 98       	cbi	0x05, 0	; 5
 192:	19 99       	sbic	0x03, 1	; 3
 194:	fe cf       	rjmp	.-4      	; 0x192 <release_bus+0xe>
 196:	5a 98       	cbi	0x0b, 2	; 11
 198:	5b 98       	cbi	0x0b, 3	; 11
 19a:	08 95       	ret

0000019c <reset_cycle>:
 19c:	5e 9a       	sbi	0x0b, 6	; 11
 19e:	8a e6       	ldi	r24, 0x6A	; 106
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <reset_cycle+0x4>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <reset_cycle+0xa>
 1a6:	5e 98       	cbi	0x0b, 6	; 11
 1a8:	08 95       	ret

000001aa <read_word>:
 1aa:	6e 7f       	andi	r22, 0xFE	; 254
 1ac:	8f 77       	andi	r24, 0x7F	; 127
 1ae:	0e 94 a5 00 	call	0x14a	; 0x14a <ad_set>
 1b2:	40 98       	cbi	0x08, 0	; 8
 1b4:	5c 9a       	sbi	0x0b, 4	; 11
 1b6:	5c 98       	cbi	0x0b, 4	; 11
 1b8:	40 9a       	sbi	0x08, 0	; 8
 1ba:	5a 98       	cbi	0x0b, 2	; 11
 1bc:	0e 94 aa 00 	call	0x154	; 0x154 <ad_get>
 1c0:	5a 9a       	sbi	0x0b, 2	; 11
 1c2:	08 95       	ret

000001c4 <write_word>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ea 01       	movw	r28, r20
 1ca:	6e 7f       	andi	r22, 0xFE	; 254
 1cc:	8f 77       	andi	r24, 0x7F	; 127
 1ce:	0e 94 a5 00 	call	0x14a	; 0x14a <ad_set>
 1d2:	40 98       	cbi	0x08, 0	; 8
 1d4:	5c 9a       	sbi	0x0b, 4	; 11
 1d6:	5c 98       	cbi	0x0b, 4	; 11
 1d8:	be 01       	movw	r22, r28
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 a5 00 	call	0x14a	; 0x14a <ad_set>
 1e2:	5b 98       	cbi	0x0b, 3	; 11
 1e4:	5b 9a       	sbi	0x0b, 3	; 11
 1e6:	40 9a       	sbi	0x08, 0	; 8
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <flash_read_mode>:
 1ee:	4f ef       	ldi	r20, 0xFF	; 255
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 1fe:	08 95       	ret

00000200 <flash_read_status_register>:
 200:	40 e7       	ldi	r20, 0x70	; 112
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 d5 00 	call	0x1aa	; 0x1aa <read_word>
 21c:	08 95       	ret

0000021e <flash_block_erase>:
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	6b 01       	movw	r12, r22
 22c:	7c 01       	movw	r14, r24
 22e:	cc 0c       	add	r12, r12
 230:	dd 1c       	adc	r13, r13
 232:	ee 1c       	adc	r14, r14
 234:	ff 1c       	adc	r15, r15
 236:	68 94       	set
 238:	e3 f8       	bld	r14, 3
 23a:	40 e2       	ldi	r20, 0x20	; 32
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 246:	40 ed       	ldi	r20, 0xD0	; 208
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	c7 01       	movw	r24, r14
 24c:	b6 01       	movw	r22, r12
 24e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 252:	0e 94 00 01 	call	0x200	; 0x200 <flash_read_status_register>
 256:	c8 2f       	mov	r28, r24
 258:	88 23       	and	r24, r24
 25a:	dc f7       	brge	.-10     	; 0x252 <flash_block_erase+0x34>
 25c:	83 ff       	sbrs	r24, 3
 25e:	04 c0       	rjmp	.+8      	; 0x268 <flash_block_erase+0x4a>
 260:	8e e0       	ldi	r24, 0x0E	; 14
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 c8 04 	call	0x990	; 0x990 <puts>
 268:	dc 2f       	mov	r29, r28
 26a:	d0 72       	andi	r29, 0x20	; 32
 26c:	c0 73       	andi	r28, 0x30	; 48
 26e:	c0 33       	cpi	r28, 0x30	; 48
 270:	21 f4       	brne	.+8      	; 0x27a <flash_block_erase+0x5c>
 272:	88 e1       	ldi	r24, 0x18	; 24
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 c8 04 	call	0x990	; 0x990 <puts>
 27a:	dd 23       	and	r29, r29
 27c:	21 f0       	breq	.+8      	; 0x286 <flash_block_erase+0x68>
 27e:	82 e2       	ldi	r24, 0x22	; 34
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 c8 04 	call	0x990	; 0x990 <puts>
 286:	4f ef       	ldi	r20, 0xFF	; 255
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	88 e0       	ldi	r24, 0x08	; 8
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	df 90       	pop	r13
 2a0:	cf 90       	pop	r12
 2a2:	08 95       	ret

000002a4 <flash_write_word>:
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	6b 01       	movw	r12, r22
 2b2:	7c 01       	movw	r14, r24
 2b4:	ea 01       	movw	r28, r20
 2b6:	40 e4       	ldi	r20, 0x40	; 64
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 2be:	ae 01       	movw	r20, r28
 2c0:	c7 01       	movw	r24, r14
 2c2:	b6 01       	movw	r22, r12
 2c4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

000002d6 <flash_prog>:
 2d6:	cf 93       	push	r28
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	0e 94 52 01 	call	0x2a4	; 0x2a4 <flash_write_word>
 2de:	0e 94 00 01 	call	0x200	; 0x200 <flash_read_status_register>
 2e2:	c8 2f       	mov	r28, r24
 2e4:	88 23       	and	r24, r24
 2e6:	dc f7       	brge	.-10     	; 0x2de <flash_prog+0x8>
 2e8:	83 ff       	sbrs	r24, 3
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <flash_prog+0x1e>
 2ec:	8e e0       	ldi	r24, 0x0E	; 14
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 c8 04 	call	0x990	; 0x990 <puts>
 2f4:	c4 ff       	sbrs	r28, 4
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <flash_prog+0x2a>
 2f8:	8c e2       	ldi	r24, 0x2C	; 44
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 c8 04 	call	0x990	; 0x990 <puts>
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <setup_c4_interrupt>:
 304:	3c 98       	cbi	0x07, 4	; 7
 306:	44 9a       	sbi	0x08, 4	; 8
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 314:	08 95       	ret

00000316 <__vector_4>:
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <main>:
 32a:	56 9a       	sbi	0x0a, 6	; 10
 32c:	5e 9a       	sbi	0x0b, 6	; 11
 32e:	0e 94 75 04 	call	0x8ea	; 0x8ea <init_uart_115200>
 332:	0e 94 8d 04 	call	0x91a	; 0x91a <init_spi>
 336:	0e 94 82 01 	call	0x304	; 0x304 <setup_c4_interrupt>
 33a:	20 9a       	sbi	0x04, 0	; 4
 33c:	21 98       	cbi	0x04, 1	; 4
 33e:	29 98       	cbi	0x05, 1	; 5
 340:	3a 9a       	sbi	0x07, 2	; 7
 342:	42 98       	cbi	0x08, 2	; 8
 344:	3b 9a       	sbi	0x07, 3	; 7
 346:	43 98       	cbi	0x08, 3	; 8
 348:	57 98       	cbi	0x0a, 7	; 10
 34a:	3d 9a       	sbi	0x07, 5	; 7
 34c:	45 9a       	sbi	0x08, 5	; 8
 34e:	0e 94 98 00 	call	0x130	; 0x130 <init_clock>
 352:	85 b5       	in	r24, 0x25	; 37
 354:	88 7f       	andi	r24, 0xF8	; 248
 356:	85 bd       	out	0x25, r24	; 37
 358:	85 b5       	in	r24, 0x25	; 37
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	85 bd       	out	0x25, r24	; 37
 35e:	8f e8       	ldi	r24, 0x8F	; 143
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <main+0x38>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x3e>
 368:	00 00       	nop
 36a:	0e 94 ce 00 	call	0x19c	; 0x19c <reset_cycle>
 36e:	0e 94 b5 00 	call	0x16a	; 0x16a <hold_bus>
 372:	78 94       	sei
 374:	ff cf       	rjmp	.-2      	; 0x374 <main+0x4a>

00000376 <get_uint32>:
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	cf 93       	push	r28
 380:	c4 e0       	ldi	r28, 0x04	; 4
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	cb 01       	movw	r24, r22
 388:	cc 24       	eor	r12, r12
 38a:	d6 2e       	mov	r13, r22
 38c:	e7 2e       	mov	r14, r23
 38e:	f8 2e       	mov	r15, r24
 390:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_getchar>
 394:	09 2e       	mov	r0, r25
 396:	00 0c       	add	r0, r0
 398:	aa 0b       	sbc	r26, r26
 39a:	bb 0b       	sbc	r27, r27
 39c:	bc 01       	movw	r22, r24
 39e:	cd 01       	movw	r24, r26
 3a0:	6c 29       	or	r22, r12
 3a2:	7d 29       	or	r23, r13
 3a4:	8e 29       	or	r24, r14
 3a6:	9f 29       	or	r25, r15
 3a8:	c1 50       	subi	r28, 0x01	; 1
 3aa:	71 f7       	brne	.-36     	; 0x388 <get_uint32+0x12>
 3ac:	cf 91       	pop	r28
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
 3b6:	08 95       	ret

000003b8 <dump_memory>:
 3b8:	8f 92       	push	r8
 3ba:	9f 92       	push	r9
 3bc:	af 92       	push	r10
 3be:	bf 92       	push	r11
 3c0:	cf 92       	push	r12
 3c2:	df 92       	push	r13
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	cf 93       	push	r28
 3ca:	0e 94 bb 01 	call	0x376	; 0x376 <get_uint32>
 3ce:	6b 01       	movw	r12, r22
 3d0:	7c 01       	movw	r14, r24
 3d2:	0e 94 bb 01 	call	0x376	; 0x376 <get_uint32>
 3d6:	4b 01       	movw	r8, r22
 3d8:	5c 01       	movw	r10, r24
 3da:	8c 0c       	add	r8, r12
 3dc:	9d 1c       	adc	r9, r13
 3de:	ae 1c       	adc	r10, r14
 3e0:	bf 1c       	adc	r11, r15
 3e2:	c8 14       	cp	r12, r8
 3e4:	d9 04       	cpc	r13, r9
 3e6:	ea 04       	cpc	r14, r10
 3e8:	fb 04       	cpc	r15, r11
 3ea:	c0 f4       	brcc	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ec:	c7 01       	movw	r24, r14
 3ee:	b6 01       	movw	r22, r12
 3f0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <read_word>
 3f4:	c9 2f       	mov	r28, r25
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_putchar>
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_putchar>
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	c8 0e       	add	r12, r24
 40c:	d1 1c       	adc	r13, r1
 40e:	e1 1c       	adc	r14, r1
 410:	f1 1c       	adc	r15, r1
 412:	c8 14       	cp	r12, r8
 414:	d9 04       	cpc	r13, r9
 416:	ea 04       	cpc	r14, r10
 418:	fb 04       	cpc	r15, r11
 41a:	40 f3       	brcs	.-48     	; 0x3ec <dump_memory+0x34>
 41c:	cf 91       	pop	r28
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	df 90       	pop	r13
 424:	cf 90       	pop	r12
 426:	bf 90       	pop	r11
 428:	af 90       	pop	r10
 42a:	9f 90       	pop	r9
 42c:	8f 90       	pop	r8
 42e:	08 95       	ret

00000430 <upload_to_memory>:

void upload_to_memory(void){
 430:	2f 92       	push	r2
 432:	3f 92       	push	r3
 434:	4f 92       	push	r4
 436:	5f 92       	push	r5
 438:	6f 92       	push	r6
 43a:	7f 92       	push	r7
 43c:	8f 92       	push	r8
 43e:	9f 92       	push	r9
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	62 97       	sbiw	r28, 0x12	; 18
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
	uint32_t start_address = get_uint32();
 464:	0e 94 bb 01 	call	0x376	; 0x376 <get_uint32>
 468:	6d 83       	std	Y+5, r22	; 0x05
 46a:	7e 83       	std	Y+6, r23	; 0x06
 46c:	8f 83       	std	Y+7, r24	; 0x07
 46e:	98 87       	std	Y+8, r25	; 0x08
	uint32_t length = get_uint32() & ~1;
 470:	0e 94 bb 01 	call	0x376	; 0x376 <get_uint32>
 474:	2b 01       	movw	r4, r22
 476:	3c 01       	movw	r6, r24
 478:	e8 94       	clt
 47a:	40 f8       	bld	r4, 0
	uint32_t end = start_address+length;
 47c:	2d 81       	ldd	r18, Y+5	; 0x05
 47e:	3e 81       	ldd	r19, Y+6	; 0x06
 480:	4f 81       	ldd	r20, Y+7	; 0x07
 482:	58 85       	ldd	r21, Y+8	; 0x08
 484:	24 0d       	add	r18, r4
 486:	35 1d       	adc	r19, r5
 488:	46 1d       	adc	r20, r6
 48a:	57 1d       	adc	r21, r7
 48c:	29 87       	std	Y+9, r18	; 0x09
 48e:	3a 87       	std	Y+10, r19	; 0x0a
 490:	4b 87       	std	Y+11, r20	; 0x0b
 492:	5c 87       	std	Y+12, r21	; 0x0c
	}
	for(uint32_t i=start_address + (length&0xff00); i< start_address + length; i+=256){
		//program whats left
	}
	*/
	for(uint32_t i=start_address; i<end; i+=256){
 494:	8d 81       	ldd	r24, Y+5	; 0x05
 496:	9e 81       	ldd	r25, Y+6	; 0x06
 498:	af 81       	ldd	r26, Y+7	; 0x07
 49a:	b8 85       	ldd	r27, Y+8	; 0x08
 49c:	82 17       	cp	r24, r18
 49e:	93 07       	cpc	r25, r19
 4a0:	a4 07       	cpc	r26, r20
 4a2:	b5 07       	cpc	r27, r21
 4a4:	08 f0       	brcs	.+2      	; 0x4a8 <upload_to_memory+0x78>
 4a6:	d5 c0       	rjmp	.+426    	; 0x652 <upload_to_memory+0x222>
 4a8:	0f 2e       	mov	r0, r31
 4aa:	f8 e4       	ldi	r31, 0x48	; 72
 4ac:	2f 2e       	mov	r2, r31
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	3f 2e       	mov	r3, r31
 4b2:	f0 2d       	mov	r31, r0
 4b4:	08 e4       	ldi	r16, 0x48	; 72
 4b6:	12 e0       	ldi	r17, 0x02	; 2
		_Bool flag = length < 256;
		buffer_pointer = 0;
		if(flag){ do buffer[buffer_pointer++] = uart_getchar(); while(buffer_pointer != length);}
 4b8:	9f ef       	ldi	r25, 0xFF	; 255
 4ba:	49 16       	cp	r4, r25
 4bc:	51 04       	cpc	r5, r1
 4be:	61 04       	cpc	r6, r1
 4c0:	71 04       	cpc	r7, r1
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <upload_to_memory+0x96>
 4c4:	a8 f4       	brcc	.+42     	; 0x4f0 <upload_to_memory+0xc0>
 4c6:	51 01       	movw	r10, r2
 4c8:	c1 2c       	mov	r12, r1
 4ca:	d1 2c       	mov	r13, r1
 4cc:	e1 2c       	mov	r14, r1
 4ce:	f1 2c       	mov	r15, r1
 4d0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_getchar>
 4d4:	d5 01       	movw	r26, r10
 4d6:	8d 93       	st	X+, r24
 4d8:	5d 01       	movw	r10, r26
 4da:	bf ef       	ldi	r27, 0xFF	; 255
 4dc:	cb 1a       	sub	r12, r27
 4de:	db 0a       	sbc	r13, r27
 4e0:	eb 0a       	sbc	r14, r27
 4e2:	fb 0a       	sbc	r15, r27
 4e4:	c4 14       	cp	r12, r4
 4e6:	d5 04       	cpc	r13, r5
 4e8:	e6 04       	cpc	r14, r6
 4ea:	f7 04       	cpc	r15, r7
 4ec:	89 f7       	brne	.-30     	; 0x4d0 <upload_to_memory+0xa0>
 4ee:	0a c0       	rjmp	.+20     	; 0x504 <upload_to_memory+0xd4>
 4f0:	71 01       	movw	r14, r2
		else{ do buffer[buffer_pointer++] = uart_getchar(); while(buffer_pointer != 256);}
 4f2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_getchar>
 4f6:	f7 01       	movw	r30, r14
 4f8:	81 93       	st	Z+, r24
 4fa:	7f 01       	movw	r14, r30
 4fc:	e0 17       	cp	r30, r16
 4fe:	f1 07       	cpc	r31, r17
 500:	c1 f7       	brne	.-16     	; 0x4f2 <upload_to_memory+0xc2>
 502:	3c c0       	rjmp	.+120    	; 0x57c <upload_to_memory+0x14c>
	}
	*/
	for(uint32_t i=start_address; i<end; i+=256){
		_Bool flag = length < 256;
		buffer_pointer = 0;
		if(flag){ do buffer[buffer_pointer++] = uart_getchar(); while(buffer_pointer != length);}
 504:	8d 80       	ldd	r8, Y+5	; 0x05
 506:	9e 80       	ldd	r9, Y+6	; 0x06
 508:	af 80       	ldd	r10, Y+7	; 0x07
 50a:	b8 84       	ldd	r11, Y+8	; 0x08
 50c:	c1 2c       	mov	r12, r1
 50e:	d1 2c       	mov	r13, r1
 510:	e1 2c       	mov	r14, r1
 512:	f1 2c       	mov	r15, r1
		buffer_pointer = 0;
		if(flag){
			do{
				uint16_t word = buffer[buffer_pointer] | (buffer[buffer_pointer+1]<<8);
				//printf("writing %04X to %04X%04X",word,(uint16_t)((i+buffer_pointer)>>16),(uint16_t)(i+buffer_pointer));
				if(i & 0x80000) flash_prog(i+buffer_pointer,word); else write_word(i+buffer_pointer,word);
 514:	a5 01       	movw	r20, r10
 516:	94 01       	movw	r18, r8
 518:	22 27       	eor	r18, r18
 51a:	33 27       	eor	r19, r19
 51c:	48 70       	andi	r20, 0x08	; 8
 51e:	55 27       	eor	r21, r21
 520:	29 83       	std	Y+1, r18	; 0x01
 522:	3a 83       	std	Y+2, r19	; 0x02
 524:	4b 83       	std	Y+3, r20	; 0x03
 526:	5c 83       	std	Y+4, r21	; 0x04
 528:	f6 01       	movw	r30, r12
 52a:	e8 5b       	subi	r30, 0xB8	; 184
 52c:	fe 4f       	sbci	r31, 0xFE	; 254
		if(flag){ do buffer[buffer_pointer++] = uart_getchar(); while(buffer_pointer != length);}
		else{ do buffer[buffer_pointer++] = uart_getchar(); while(buffer_pointer != 256);}
		buffer_pointer = 0;
		if(flag){
			do{
				uint16_t word = buffer[buffer_pointer] | (buffer[buffer_pointer+1]<<8);
 52e:	41 81       	ldd	r20, Z+1	; 0x01
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	54 2f       	mov	r21, r20
 534:	44 27       	eor	r20, r20
 536:	80 81       	ld	r24, Z
 538:	48 2b       	or	r20, r24
				//printf("writing %04X to %04X%04X",word,(uint16_t)((i+buffer_pointer)>>16),(uint16_t)(i+buffer_pointer));
				if(i & 0x80000) flash_prog(i+buffer_pointer,word); else write_word(i+buffer_pointer,word);
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	9a 81       	ldd	r25, Y+2	; 0x02
 53e:	ab 81       	ldd	r26, Y+3	; 0x03
 540:	bc 81       	ldd	r27, Y+4	; 0x04
 542:	89 2b       	or	r24, r25
 544:	8a 2b       	or	r24, r26
 546:	8b 2b       	or	r24, r27
 548:	29 f0       	breq	.+10     	; 0x554 <upload_to_memory+0x124>
 54a:	c5 01       	movw	r24, r10
 54c:	b4 01       	movw	r22, r8
 54e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 552:	04 c0       	rjmp	.+8      	; 0x55c <upload_to_memory+0x12c>
 554:	c5 01       	movw	r24, r10
 556:	b4 01       	movw	r22, r8
 558:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 55c:	92 e0       	ldi	r25, 0x02	; 2
 55e:	c9 0e       	add	r12, r25
 560:	d1 1c       	adc	r13, r1
 562:	e1 1c       	adc	r14, r1
 564:	f1 1c       	adc	r15, r1
 566:	a2 e0       	ldi	r26, 0x02	; 2
 568:	8a 0e       	add	r8, r26
 56a:	91 1c       	adc	r9, r1
 56c:	a1 1c       	adc	r10, r1
 56e:	b1 1c       	adc	r11, r1
				buffer_pointer += 2;
			}while(buffer_pointer != length);
 570:	c4 14       	cp	r12, r4
 572:	d5 04       	cpc	r13, r5
 574:	e6 04       	cpc	r14, r6
 576:	f7 04       	cpc	r15, r7
 578:	b9 f6       	brne	.-82     	; 0x528 <upload_to_memory+0xf8>
 57a:	4d c0       	rjmp	.+154    	; 0x616 <upload_to_memory+0x1e6>
 57c:	e9 e4       	ldi	r30, 0x49	; 73
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	2d 81       	ldd	r18, Y+5	; 0x05
 582:	3e 81       	ldd	r19, Y+6	; 0x06
 584:	4f 81       	ldd	r20, Y+7	; 0x07
 586:	58 85       	ldd	r21, Y+8	; 0x08
 588:	3f 5f       	subi	r19, 0xFF	; 255
 58a:	4f 4f       	sbci	r20, 0xFF	; 255
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	29 83       	std	Y+1, r18	; 0x01
 590:	3a 83       	std	Y+2, r19	; 0x02
 592:	4b 83       	std	Y+3, r20	; 0x03
 594:	5c 83       	std	Y+4, r21	; 0x04
	*/
	for(uint32_t i=start_address; i<end; i+=256){
		_Bool flag = length < 256;
		buffer_pointer = 0;
		if(flag){ do buffer[buffer_pointer++] = uart_getchar(); while(buffer_pointer != length);}
		else{ do buffer[buffer_pointer++] = uart_getchar(); while(buffer_pointer != 256);}
 596:	cd 80       	ldd	r12, Y+5	; 0x05
 598:	de 80       	ldd	r13, Y+6	; 0x06
 59a:	ef 80       	ldd	r14, Y+7	; 0x07
 59c:	f8 84       	ldd	r15, Y+8	; 0x08
				buffer_pointer += 2;
			}while(buffer_pointer != length);
		}else{
			do{
				uint16_t word = buffer[buffer_pointer] | (buffer[buffer_pointer+1]<<8);
				if(i & 0x80000) flash_prog(i+buffer_pointer,word); else write_word(i+buffer_pointer,word);
 59e:	46 01       	movw	r8, r12
 5a0:	57 01       	movw	r10, r14
 5a2:	88 24       	eor	r8, r8
 5a4:	99 24       	eor	r9, r9
 5a6:	38 e0       	ldi	r19, 0x08	; 8
 5a8:	a3 22       	and	r10, r19
 5aa:	bb 24       	eor	r11, r11
 5ac:	fa 8b       	std	Y+18, r31	; 0x12
 5ae:	e9 8b       	std	Y+17, r30	; 0x11
 5b0:	4d 86       	std	Y+13, r4	; 0x0d
 5b2:	5e 86       	std	Y+14, r5	; 0x0e
 5b4:	6f 86       	std	Y+15, r6	; 0x0f
 5b6:	78 8a       	std	Y+16, r7	; 0x10
 5b8:	49 80       	ldd	r4, Y+1	; 0x01
 5ba:	5a 80       	ldd	r5, Y+2	; 0x02
 5bc:	6b 80       	ldd	r6, Y+3	; 0x03
 5be:	7c 80       	ldd	r7, Y+4	; 0x04
				if(i & 0x80000) flash_prog(i+buffer_pointer,word); else write_word(i+buffer_pointer,word);
				buffer_pointer += 2;
			}while(buffer_pointer != length);
		}else{
			do{
				uint16_t word = buffer[buffer_pointer] | (buffer[buffer_pointer+1]<<8);
 5c0:	a9 89       	ldd	r26, Y+17	; 0x11
 5c2:	ba 89       	ldd	r27, Y+18	; 0x12
 5c4:	4c 91       	ld	r20, X
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	54 2f       	mov	r21, r20
 5ca:	44 27       	eor	r20, r20
 5cc:	fd 01       	movw	r30, r26
 5ce:	31 97       	sbiw	r30, 0x01	; 1
 5d0:	80 81       	ld	r24, Z
 5d2:	48 2b       	or	r20, r24
				if(i & 0x80000) flash_prog(i+buffer_pointer,word); else write_word(i+buffer_pointer,word);
 5d4:	81 14       	cp	r8, r1
 5d6:	91 04       	cpc	r9, r1
 5d8:	a1 04       	cpc	r10, r1
 5da:	b1 04       	cpc	r11, r1
 5dc:	29 f0       	breq	.+10     	; 0x5e8 <upload_to_memory+0x1b8>
 5de:	c7 01       	movw	r24, r14
 5e0:	b6 01       	movw	r22, r12
 5e2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <upload_to_memory+0x1c0>
 5e8:	c7 01       	movw	r24, r14
 5ea:	b6 01       	movw	r22, r12
 5ec:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 5f0:	e9 89       	ldd	r30, Y+17	; 0x11
 5f2:	fa 89       	ldd	r31, Y+18	; 0x12
 5f4:	32 96       	adiw	r30, 0x02	; 2
 5f6:	fa 8b       	std	Y+18, r31	; 0x12
 5f8:	e9 8b       	std	Y+17, r30	; 0x11
 5fa:	f2 e0       	ldi	r31, 0x02	; 2
 5fc:	cf 0e       	add	r12, r31
 5fe:	d1 1c       	adc	r13, r1
 600:	e1 1c       	adc	r14, r1
 602:	f1 1c       	adc	r15, r1
				buffer_pointer += 2;
			}while(buffer_pointer != 256);
 604:	4c 14       	cp	r4, r12
 606:	5d 04       	cpc	r5, r13
 608:	6e 04       	cpc	r6, r14
 60a:	7f 04       	cpc	r7, r15
 60c:	c9 f6       	brne	.-78     	; 0x5c0 <upload_to_memory+0x190>
 60e:	4d 84       	ldd	r4, Y+13	; 0x0d
 610:	5e 84       	ldd	r5, Y+14	; 0x0e
 612:	6f 84       	ldd	r6, Y+15	; 0x0f
 614:	78 88       	ldd	r7, Y+16	; 0x10
		}
		length -= 256;
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	52 1a       	sub	r5, r18
 61a:	61 08       	sbc	r6, r1
 61c:	71 08       	sbc	r7, r1
		uart_putchar(6,NULL);
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	86 e0       	ldi	r24, 0x06	; 6
 624:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_putchar>
	}
	for(uint32_t i=start_address + (length&0xff00); i< start_address + length; i+=256){
		//program whats left
	}
	*/
	for(uint32_t i=start_address; i<end; i+=256){
 628:	8d 81       	ldd	r24, Y+5	; 0x05
 62a:	9e 81       	ldd	r25, Y+6	; 0x06
 62c:	af 81       	ldd	r26, Y+7	; 0x07
 62e:	b8 85       	ldd	r27, Y+8	; 0x08
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	af 4f       	sbci	r26, 0xFF	; 255
 634:	bf 4f       	sbci	r27, 0xFF	; 255
 636:	8d 83       	std	Y+5, r24	; 0x05
 638:	9e 83       	std	Y+6, r25	; 0x06
 63a:	af 83       	std	Y+7, r26	; 0x07
 63c:	b8 87       	std	Y+8, r27	; 0x08
 63e:	29 85       	ldd	r18, Y+9	; 0x09
 640:	3a 85       	ldd	r19, Y+10	; 0x0a
 642:	4b 85       	ldd	r20, Y+11	; 0x0b
 644:	5c 85       	ldd	r21, Y+12	; 0x0c
 646:	82 17       	cp	r24, r18
 648:	93 07       	cpc	r25, r19
 64a:	a4 07       	cpc	r26, r20
 64c:	b5 07       	cpc	r27, r21
 64e:	08 f4       	brcc	.+2      	; 0x652 <upload_to_memory+0x222>
 650:	33 cf       	rjmp	.-410    	; 0x4b8 <upload_to_memory+0x88>
			}while(buffer_pointer != 256);
		}
		length -= 256;
		uart_putchar(6,NULL);
	}
	write_word(0x80000,0x00ff);
 652:	4f ef       	ldi	r20, 0xFF	; 255
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	88 e0       	ldi	r24, 0x08	; 8
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
}
 662:	62 96       	adiw	r28, 0x12	; 18
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	f8 94       	cli
 668:	de bf       	out	0x3e, r29	; 62
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	bf 90       	pop	r11
 680:	af 90       	pop	r10
 682:	9f 90       	pop	r9
 684:	8f 90       	pop	r8
 686:	7f 90       	pop	r7
 688:	6f 90       	pop	r6
 68a:	5f 90       	pop	r5
 68c:	4f 90       	pop	r4
 68e:	3f 90       	pop	r3
 690:	2f 90       	pop	r2
 692:	08 95       	ret

00000694 <generate_interrupt>:

void generate_interrupt(void){
	SET_OUTPUT_LOW(INTR); //needed for some reason... shouldn't be as its already called in main... XXX
 694:	3a 9a       	sbi	0x07, 2	; 7
 696:	42 98       	cbi	0x08, 2	; 8
	SET_INPUT_LOW(INTA);
 698:	57 98       	cbi	0x0a, 7	; 10
 69a:	5f 98       	cbi	0x0b, 7	; 11
	unsigned char number = uart_getchar();
 69c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <uart_getchar>
	ad_set(0x00000000 | number);
 6a0:	68 2f       	mov	r22, r24
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 a5 00 	call	0x14a	; 0x14a <ad_set>
	INTR_ON();
 6ac:	42 9a       	sbi	0x08, 2	; 8
	while(GET_INPUT(INTA));
 6ae:	4f 99       	sbic	0x09, 7	; 9
 6b0:	fe cf       	rjmp	.-4      	; 0x6ae <generate_interrupt+0x1a>
	INTR_OFF();
 6b2:	42 98       	cbi	0x08, 2	; 8
	while(!GET_INPUT(INTA));
 6b4:	4f 9b       	sbis	0x09, 7	; 9
 6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <generate_interrupt+0x20>
	//OE_ON();
	while(GET_INPUT(INTA));
 6b8:	4f 99       	sbic	0x09, 7	; 9
 6ba:	fe cf       	rjmp	.-4      	; 0x6b8 <generate_interrupt+0x24>
	OE_ON(); //try moving this b4 previous while
 6bc:	40 98       	cbi	0x08, 0	; 8
	while(!GET_INPUT(INTA));
 6be:	4f 9b       	sbis	0x09, 7	; 9
 6c0:	fe cf       	rjmp	.-4      	; 0x6be <generate_interrupt+0x2a>
	OE_OFF();
 6c2:	40 9a       	sbi	0x08, 0	; 8
 6c4:	08 95       	ret

000006c6 <generate_nm_interrupt>:
}

void generate_nm_interrupt(void){
	SET_OUTPUT_LOW(NMI); //needed for some reason... shouldn't be as its already called in main... XXX
 6c6:	3b 9a       	sbi	0x07, 3	; 7
 6c8:	43 98       	cbi	0x08, 3	; 8
	NMI_ON();
 6ca:	43 9a       	sbi	0x08, 3	; 8
	while(GET_INPUT(CLK));
 6cc:	4d 99       	sbic	0x09, 5	; 9
 6ce:	fe cf       	rjmp	.-4      	; 0x6cc <generate_nm_interrupt+0x6>
	while(!GET_INPUT(CLK)); while(GET_INPUT(CLK)); //NMI should be on for at
 6d0:	4d 9b       	sbis	0x09, 5	; 9
 6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <generate_nm_interrupt+0xa>
 6d4:	4d 99       	sbic	0x09, 5	; 9
 6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <generate_nm_interrupt+0xe>
	while(!GET_INPUT(CLK)); while(GET_INPUT(CLK)); //least two clock cycles
 6d8:	4d 9b       	sbis	0x09, 5	; 9
 6da:	fe cf       	rjmp	.-4      	; 0x6d8 <generate_nm_interrupt+0x12>
 6dc:	4d 99       	sbic	0x09, 5	; 9
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <generate_nm_interrupt+0x16>
	NMI_OFF();
 6e0:	43 98       	cbi	0x08, 3	; 8
 6e2:	08 95       	ret

000006e4 <program_my_program>:
}

void program_my_program(void){
	flash_prog(0xffff0, 0x00BC); flash_prog(0xffff2, 0xEA10); flash_prog(0xffff4, 0x0020); flash_prog(0xffff6, 0x0000);
 6e4:	4c eb       	ldi	r20, 0xBC	; 188
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	60 ef       	ldi	r22, 0xF0	; 240
 6ea:	7f ef       	ldi	r23, 0xFF	; 255
 6ec:	8f e0       	ldi	r24, 0x0F	; 15
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 6f4:	40 e1       	ldi	r20, 0x10	; 16
 6f6:	5a ee       	ldi	r21, 0xEA	; 234
 6f8:	62 ef       	ldi	r22, 0xF2	; 242
 6fa:	7f ef       	ldi	r23, 0xFF	; 255
 6fc:	8f e0       	ldi	r24, 0x0F	; 15
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 704:	40 e2       	ldi	r20, 0x20	; 32
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	64 ef       	ldi	r22, 0xF4	; 244
 70a:	7f ef       	ldi	r23, 0xFF	; 255
 70c:	8f e0       	ldi	r24, 0x0F	; 15
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 714:	40 e0       	ldi	r20, 0x00	; 0
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	66 ef       	ldi	r22, 0xF6	; 246
 71a:	7f ef       	ldi	r23, 0xFF	; 255
 71c:	8f e0       	ldi	r24, 0x0F	; 15
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
	flash_prog(0xffff8, 0x9090); flash_prog(0xffffa, 0x9090); flash_prog(0xffffc, 0x9090); flash_prog(0xffffe, 0x9090);
 724:	40 e9       	ldi	r20, 0x90	; 144
 726:	50 e9       	ldi	r21, 0x90	; 144
 728:	68 ef       	ldi	r22, 0xF8	; 248
 72a:	7f ef       	ldi	r23, 0xFF	; 255
 72c:	8f e0       	ldi	r24, 0x0F	; 15
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 734:	40 e9       	ldi	r20, 0x90	; 144
 736:	50 e9       	ldi	r21, 0x90	; 144
 738:	6a ef       	ldi	r22, 0xFA	; 250
 73a:	7f ef       	ldi	r23, 0xFF	; 255
 73c:	8f e0       	ldi	r24, 0x0F	; 15
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 744:	40 e9       	ldi	r20, 0x90	; 144
 746:	50 e9       	ldi	r21, 0x90	; 144
 748:	6c ef       	ldi	r22, 0xFC	; 252
 74a:	7f ef       	ldi	r23, 0xFF	; 255
 74c:	8f e0       	ldi	r24, 0x0F	; 15
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
 754:	40 e9       	ldi	r20, 0x90	; 144
 756:	50 e9       	ldi	r21, 0x90	; 144
 758:	6e ef       	ldi	r22, 0xFE	; 254
 75a:	7f ef       	ldi	r23, 0xFF	; 255
 75c:	8f e0       	ldi	r24, 0x0F	; 15
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <flash_prog>
	write_word(0x80000,0x00ff);
 764:	4f ef       	ldi	r20, 0xFF	; 255
 766:	50 e0       	ldi	r21, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	88 e0       	ldi	r24, 0x08	; 8
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <write_word>
 774:	08 95       	ret

00000776 <erase_flash>:
}

void erase_flash(void){
	uint32_t address = get_uint32();
 776:	0e 94 bb 01 	call	0x376	; 0x376 <get_uint32>
	if(!(address & 0x80000)) return;
 77a:	83 ff       	sbrs	r24, 3
 77c:	0b c0       	rjmp	.+22     	; 0x794 <erase_flash+0x1e>
	address = (address & ~0x80000) >> 1;
 77e:	dc 01       	movw	r26, r24
 780:	cb 01       	movw	r24, r22
 782:	a7 7f       	andi	r26, 0xF7	; 247
 784:	bc 01       	movw	r22, r24
 786:	cd 01       	movw	r24, r26
 788:	96 95       	lsr	r25
 78a:	87 95       	ror	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
	flash_block_erase(address);
 790:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
 794:	08 95       	ret

00000796 <__vector_18>:
}

uint16_t address_within_flash;

ISR(USART_RX_vect){
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	switch(UDR0){
 7b8:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7bc:	8e 2f       	mov	r24, r30
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	fc 01       	movw	r30, r24
 7c2:	f1 97       	sbiw	r30, 0x31	; 49
 7c4:	e5 34       	cpi	r30, 0x45	; 69
 7c6:	f1 05       	cpc	r31, r1
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__vector_18+0x36>
 7ca:	68 c0       	rjmp	.+208    	; 0x89c <__vector_18+0x106>
 7cc:	ec 5c       	subi	r30, 0xCC	; 204
 7ce:	ff 4f       	sbci	r31, 0xFF	; 255
 7d0:	0c 94 c2 04 	jmp	0x984	; 0x984 <__tablejump2__>
		case 'c':
			release_bus();
 7d4:	0e 94 c2 00 	call	0x184	; 0x184 <release_bus>
			break;
 7d8:	61 c0       	rjmp	.+194    	; 0x89c <__vector_18+0x106>
		case 'p':
			hold_bus();
 7da:	0e 94 b5 00 	call	0x16a	; 0x16a <hold_bus>
			break;
 7de:	5e c0       	rjmp	.+188    	; 0x89c <__vector_18+0x106>
		case 'r':
			reset_cycle();
 7e0:	0e 94 ce 00 	call	0x19c	; 0x19c <reset_cycle>
			hold_bus();
 7e4:	0e 94 b5 00 	call	0x16a	; 0x16a <hold_bus>
			break;
 7e8:	59 c0       	rjmp	.+178    	; 0x89c <__vector_18+0x106>
		case 'm':
			dump_memory();
 7ea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <dump_memory>
			break;
 7ee:	56 c0       	rjmp	.+172    	; 0x89c <__vector_18+0x106>
		case 'u':
			upload_to_memory();
 7f0:	0e 94 18 02 	call	0x430	; 0x430 <upload_to_memory>
			break;
 7f4:	53 c0       	rjmp	.+166    	; 0x89c <__vector_18+0x106>
		case 'i':
			generate_interrupt();
 7f6:	0e 94 4a 03 	call	0x694	; 0x694 <generate_interrupt>
			break;
 7fa:	50 c0       	rjmp	.+160    	; 0x89c <__vector_18+0x106>
		case 'n':
			generate_nm_interrupt();
 7fc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <generate_nm_interrupt>
			break;
 800:	4d c0       	rjmp	.+154    	; 0x89c <__vector_18+0x106>
		case 'd':
			//debug_on = !debug_on;
			break;
		case 'e':
			erase_flash();
 802:	0e 94 bb 03 	call	0x776	; 0x776 <erase_flash>
			break;
 806:	4a c0       	rjmp	.+148    	; 0x89c <__vector_18+0x106>
		case '1':
			flash_block_erase(0x3E000);
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	70 ee       	ldi	r23, 0xE0	; 224
 80c:	83 e0       	ldi	r24, 0x03	; 3
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			flash_read_mode();
 814:	0e 94 f7 00 	call	0x1ee	; 0x1ee <flash_read_mode>
			printf("done 1!\n");
 818:	86 e3       	ldi	r24, 0x36	; 54
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 c8 04 	call	0x990	; 0x990 <puts>
			program_my_program();
 820:	0e 94 72 03 	call	0x6e4	; 0x6e4 <program_my_program>
			printf("done 2!\n");
 824:	8e e3       	ldi	r24, 0x3E	; 62
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	0e 94 c8 04 	call	0x990	; 0x990 <puts>
			break;
 82c:	37 c0       	rjmp	.+110    	; 0x89c <__vector_18+0x106>
		case '2':
			flash_block_erase(0x00000);
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	cb 01       	movw	r24, r22
 834:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			flash_block_erase(0x10000);
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			flash_block_erase(0x20000);
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			flash_block_erase(0x30000);
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	83 e0       	ldi	r24, 0x03	; 3
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			flash_block_erase(0x3C000);
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	70 ec       	ldi	r23, 0xC0	; 192
 860:	83 e0       	ldi	r24, 0x03	; 3
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			flash_block_erase(0x3D000);
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	70 ed       	ldi	r23, 0xD0	; 208
 86c:	83 e0       	ldi	r24, 0x03	; 3
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			flash_block_erase(0x3E000);
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	70 ee       	ldi	r23, 0xE0	; 224
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 0f 01 	call	0x21e	; 0x21e <flash_block_erase>
			break;
 880:	0d c0       	rjmp	.+26     	; 0x89c <__vector_18+0x106>
		case '3':
			release_bus();
 882:	0e 94 c2 00 	call	0x184	; 0x184 <release_bus>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 886:	2f ef       	ldi	r18, 0xFF	; 255
 888:	83 ed       	ldi	r24, 0xD3	; 211
 88a:	90 e3       	ldi	r25, 0x30	; 48
 88c:	21 50       	subi	r18, 0x01	; 1
 88e:	80 40       	sbci	r24, 0x00	; 0
 890:	90 40       	sbci	r25, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <__vector_18+0xf6>
 894:	00 c0       	rjmp	.+0      	; 0x896 <__vector_18+0x100>
 896:	00 00       	nop
			_delay_ms(1000);
			hold_bus();
 898:	0e 94 b5 00 	call	0x16a	; 0x16a <hold_bus>
	}
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <uart_putchar>:
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
	stdout = &uart_stdout;
}

int uart_putchar(char c, FILE *stream){
	unsigned char sreg = SREG;
 8be:	2f b7       	in	r18, 0x3f	; 63
	cli();
 8c0:	f8 94       	cli
	while(!(UCSR0A & (1<<UDRE0)));
 8c2:	e0 ec       	ldi	r30, 0xC0	; 192
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	90 81       	ld	r25, Z
 8c8:	95 ff       	sbrs	r25, 5
 8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <uart_putchar+0x8>
	UDR0 = c;
 8cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	SREG = sreg;
 8d0:	2f bf       	out	0x3f, r18	; 63
	return(0);
}
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	08 95       	ret

000008d8 <uart_getchar>:

int uart_getchar(){
	while(!(UCSR0A & (1<<RXC0)));
 8d8:	e0 ec       	ldi	r30, 0xC0	; 192
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	80 81       	ld	r24, Z
 8de:	88 23       	and	r24, r24
 8e0:	ec f7       	brge	.-6      	; 0x8dc <uart_getchar+0x4>
	return((int)UDR0);
 8e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	08 95       	ret

000008ea <init_uart_115200>:

static FILE uart_stdout = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_WRITE);

void init_uart_115200(){
	//200K - 4 | (9 & U2X)  ,  400K - (4 & U2X)  ,  500K - 1 | (3 & U2X)  ,  1M doesn't work (because of usb-to-uart converter)
	UBRR0 = 4;
 8ea:	84 e0       	ldi	r24, 0x04	; 4
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 8f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A |= (1 << U2X0);
 8f6:	e0 ec       	ldi	r30, 0xC0	; 192
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	82 60       	ori	r24, 0x02	; 2
 8fe:	80 83       	st	Z, r24
	//UCSR0B = (1<<TXEN0) | (1<<UDRIE0) | (1<<RXEN0) | (1<<RXCIE0);
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0);
 900:	88 e9       	ldi	r24, 0x98	; 152
 902:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 906:	86 e0       	ldi	r24, 0x06	; 6
 908:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	stdout = &uart_stdout;
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <__iob+0x3>
 914:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__iob+0x2>
 918:	08 95       	ret

0000091a <init_spi>:
	SPDR = data & 0xff;
	result <<= 8;
	while(!(SPSR & 0x80));
	result |= SPDR;
	return(result);
}
 91a:	40 9a       	sbi	0x08, 0	; 8
 91c:	38 9a       	sbi	0x07, 0	; 7
 91e:	41 9a       	sbi	0x08, 1	; 8
 920:	39 9a       	sbi	0x07, 1	; 7
 922:	2a 98       	cbi	0x05, 2	; 5
 924:	22 9a       	sbi	0x04, 2	; 4
 926:	23 9a       	sbi	0x04, 3	; 4
 928:	25 9a       	sbi	0x04, 5	; 4
 92a:	80 e5       	ldi	r24, 0x50	; 80
 92c:	8c bd       	out	0x2c, r24	; 44
 92e:	8d b5       	in	r24, 0x2d	; 45
 930:	81 60       	ori	r24, 0x01	; 1
 932:	8d bd       	out	0x2d, r24	; 45
 934:	08 95       	ret

00000936 <spi_recieve>:

uint16_t spi_recieve(){
	uint16_t result;
	SPDR = 0;
 936:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & 0x80));
 938:	0d b4       	in	r0, 0x2d	; 45
 93a:	07 fe       	sbrs	r0, 7
 93c:	fd cf       	rjmp	.-6      	; 0x938 <spi_recieve+0x2>
	result = SPDR;
 93e:	8e b5       	in	r24, 0x2e	; 46
 940:	90 e0       	ldi	r25, 0x00	; 0
	SPDR = 0;
 942:	1e bc       	out	0x2e, r1	; 46
	result <<= 8;
 944:	98 2f       	mov	r25, r24
 946:	88 27       	eor	r24, r24
	while(!(SPSR & 0x80));
 948:	0d b4       	in	r0, 0x2d	; 45
 94a:	07 fe       	sbrs	r0, 7
 94c:	fd cf       	rjmp	.-6      	; 0x948 <spi_recieve+0x12>
	result |= SPDR;
 94e:	2e b5       	in	r18, 0x2e	; 46
	return(result);
}
 950:	82 2b       	or	r24, r18
 952:	08 95       	ret

00000954 <spi_send>:

void spi_send(uint32_t data){
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
	SPDR = (data>>16) & 0xff;
 958:	8c 01       	movw	r16, r24
 95a:	22 27       	eor	r18, r18
 95c:	33 27       	eor	r19, r19
 95e:	0e bd       	out	0x2e, r16	; 46
	while(!(SPSR & (1<<SPIF)));
 960:	0d b4       	in	r0, 0x2d	; 45
 962:	07 fe       	sbrs	r0, 7
 964:	fd cf       	rjmp	.-6      	; 0x960 <spi_send+0xc>
	SPDR = (data>>8) & 0xff;
 966:	07 2f       	mov	r16, r23
 968:	18 2f       	mov	r17, r24
 96a:	29 2f       	mov	r18, r25
 96c:	33 27       	eor	r19, r19
 96e:	0e bd       	out	0x2e, r16	; 46
	while(!(SPSR & (1<<SPIF)));
 970:	0d b4       	in	r0, 0x2d	; 45
 972:	07 fe       	sbrs	r0, 7
 974:	fd cf       	rjmp	.-6      	; 0x970 <spi_send+0x1c>
	SPDR = (data>>0) & 0xff;
 976:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
 978:	0d b4       	in	r0, 0x2d	; 45
 97a:	07 fe       	sbrs	r0, 7
 97c:	fd cf       	rjmp	.-6      	; 0x978 <spi_send+0x24>
}
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <__tablejump2__>:
 984:	ee 0f       	add	r30, r30
 986:	ff 1f       	adc	r31, r31
 988:	05 90       	lpm	r0, Z+
 98a:	f4 91       	lpm	r31, Z
 98c:	e0 2d       	mov	r30, r0
 98e:	09 94       	ijmp

00000990 <puts>:
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <__iob+0x2>
 99c:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <__iob+0x3>
 9a0:	23 81       	ldd	r18, Z+3	; 0x03
 9a2:	21 ff       	sbrs	r18, 1
 9a4:	1b c0       	rjmp	.+54     	; 0x9dc <puts+0x4c>
 9a6:	8c 01       	movw	r16, r24
 9a8:	d0 e0       	ldi	r29, 0x00	; 0
 9aa:	c0 e0       	ldi	r28, 0x00	; 0
 9ac:	f8 01       	movw	r30, r16
 9ae:	81 91       	ld	r24, Z+
 9b0:	8f 01       	movw	r16, r30
 9b2:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <__iob+0x2>
 9b6:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <__iob+0x3>
 9ba:	db 01       	movw	r26, r22
 9bc:	18 96       	adiw	r26, 0x08	; 8
 9be:	ed 91       	ld	r30, X+
 9c0:	fc 91       	ld	r31, X
 9c2:	19 97       	sbiw	r26, 0x09	; 9
 9c4:	88 23       	and	r24, r24
 9c6:	31 f0       	breq	.+12     	; 0x9d4 <puts+0x44>
 9c8:	09 95       	icall
 9ca:	89 2b       	or	r24, r25
 9cc:	79 f3       	breq	.-34     	; 0x9ac <puts+0x1c>
 9ce:	df ef       	ldi	r29, 0xFF	; 255
 9d0:	cf ef       	ldi	r28, 0xFF	; 255
 9d2:	ec cf       	rjmp	.-40     	; 0x9ac <puts+0x1c>
 9d4:	8a e0       	ldi	r24, 0x0A	; 10
 9d6:	09 95       	icall
 9d8:	89 2b       	or	r24, r25
 9da:	19 f0       	breq	.+6      	; 0x9e2 <puts+0x52>
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	9f ef       	ldi	r25, 0xFF	; 255
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <puts+0x56>
 9e2:	8d 2f       	mov	r24, r29
 9e4:	9c 2f       	mov	r25, r28
 9e6:	df 91       	pop	r29
 9e8:	cf 91       	pop	r28
 9ea:	1f 91       	pop	r17
 9ec:	0f 91       	pop	r16
 9ee:	08 95       	ret

000009f0 <_exit>:
 9f0:	f8 94       	cli

000009f2 <__stop_program>:
 9f2:	ff cf       	rjmp	.-2      	; 0x9f2 <__stop_program>
